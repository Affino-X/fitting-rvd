class FetchService {
    constructor(baseURL) {
        this.baseURL = baseURL;
    }

    async fetchData(type) {
        try {
            const response = await fetch(`${this.baseURL}?type=${type}`);
            const data = await response.json();

            return Array.isArray(data) 
                ? data.map(item => ({
                    ...item,
                    teh_harakteristiki: item.teh_harakteristiki.replace(/<br\s*\/?>/gi, " ")  // –£–±–∏—Ä–∞–µ–º <br />
                })) 
                : [];
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
            return [];
        }
    }
}

class Component {
    constructor(tag, props = {}, children = []) {
        this.tag = tag;
        this.props = props;
        this.children = children;
    }

    render() {
        const element = document.createElement(this.tag);

        Object.entries(this.props).forEach(([key, value]) => {
            if (key.startsWith("on")) {
                element.addEventListener(key.substring(2).toLowerCase(), value);
            } else {
                element.setAttribute(key, value);
            }
        });

        this.children.forEach(child => {
            if (child instanceof Component) {
                element.appendChild(child.render());
            } else {
                element.appendChild(document.createTextNode(child));
            }
        });

        return element;
    }
}

class HTMLBuilder {
    constructor(data) {
        this.data = data;
    }


    

   build() {
        return new Component("div", { class: "fitting-row" }, [
            new Component("div", { class: "fitting-row__wrapper" }, [
                new Component("div", { class: "fitting-row__name" }, [this.data.title]),
                ...(this.data.teh_harakteristiki && this.data.teh_harakteristiki.trim() !== "" 
                ? [new Component("div", { class: "fitting-details-header" }, [
                    new Component("span", {}, ["–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä —Ä—É–∫–∞–≤–∞, –º–º (–î—É) "]),
                    new Component("b", {}, [
                        this.data.teh_harakteristiki.split('\r\n')[0].split(/:\s*/)[1]
                    ])
                ])] 
                : [new Component("div", { class: "fitting-details-header" })]),
                new Component("div", { class: "fitting-details hidden" }, [
                    new Component("h4", { class: "fitting-table__column m-5 tablet" }, ["–¢–µ—Ö. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]),
                    ...this.data.teh_harakteristiki.split('\r\n').map(row => {
                        const [label, value] = row.split(/:\s*/);
                        return new Component("div", { class: "row" }, [
                            new Component("span", {}, [label + ":"]),
                            new Component("div", { class: "line" }),
                            new Component("b", {}, [value])
                        ]);
                    })
                ]),
                new Component("div", { class: "fitting-row__qty" }, [
                    new Component("button", { class: "qty-btn minus" }, ["-"]),
                    new Component("span", { class: "qty-value" }, ["1"]),
                    new Component("button", { class: "qty-btn plus" }, ["+"])
                ]),
                new Component("div", { class: "fitting-row__price" }, [this.data.price ? `${this.data.price} —Ä—É–±.` : "–ü–æ –∑–∞–ø—Ä–æ—Å—É"]),
                new Component("div", { class: "fitting-row__action" }, [
                    new Component("div", { class: "fitting-row__select" }, [
                        new Component("input", { 
                            type: "checkbox", 
                        })
                        
                    ]),
                    ...(this.data.teh_harakteristiki && this.data.teh_harakteristiki.trim() !== ""
                    ? [new Component("button", { class: "details-btn" }, ["–ü–æ–¥—Ä–æ–±–Ω–µ–µ"])]
                    : [])
                ])
            ])
        ]);
    }

    buildSelectedItems(json) {
        return json.items.map(item => new Component("div", { class: "fitting-row row-result", "data-id": item.id }, [
            new Component("div", { class: "fitting-row__wrapper" }, [
                new Component("div", { class: "fitting-row__name" }, [item.name]),
                new Component("div", { class: "fitting-details-header" }, [
                    new Component("span", {}, ["–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä —Ä—É–∫–∞–≤–∞, –º–º (–î—É) "]),
                    new Component("b", {}, [item.dy])
                ]),
                new Component("div", { class: "fitting-row__qty" }, [
                    new Component("button", { class: "qty-btn minus" }, ["-"]),
                    new Component("span", { class: "qty-value" }, [item.quantity.toString()]),
                    new Component("button", { class: "qty-btn plus" }, ["+"])
                ]),
                new Component("div", { class: "fitting-row__price" }, [
                    item.price === "–ü–æ –∑–∞–ø—Ä–æ—Å—É" ? "–ü–æ –∑–∞–ø—Ä–æ—Å—É" : `${item.price} —Ä—É–±.`
                ]),
                new Component("div", { class: "fitting-row__delete" }, [
                    new Component("button", { class: "delete-btn" }, ["–£–¥–∞–ª–∏—Ç—å"])
                ])
            ])
        ]));
    }
    
} 

class ProductLogic {
    constructor(cardElement) {
        this.card = cardElement;
        this.detailsBtn = this.card.querySelector(".details-btn");
        this.details = this.card.querySelector(".fitting-details");
        this.header = this.card.querySelector(".fitting-details-header");
        this.minusBtn = this.card.querySelector(".qty-btn.minus");
        this.plusBtn = this.card.querySelector(".qty-btn.plus");
        this.qtyValue = this.card.querySelector(".qty-value");
        this.checkbox = this.card.querySelector(".fitting-row__select input[type='checkbox']");
        this.priceElement = this.card.querySelector(".fitting-row__price");
        this.count = parseInt(this.qtyValue?.textContent || "1", 10); // –ï—Å–ª–∏ qtyValue –Ω–µ—Ç, –±–µ—Ä–µ–º "1"

        this.init();
        this.restoreCheckboxState(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    }

    init() {
        if (this.detailsBtn) this.detailsBtn.addEventListener("click", () => this.toggleDetails());
        if (this.minusBtn) this.minusBtn.addEventListener("click", () => this.decrease());
        if (this.plusBtn) this.plusBtn.addEventListener("click", () => this.increase());
        if (this.checkbox) this.checkbox.addEventListener("change", () => this.updateSelection());
    }

    toggleDetails() {
        if (!this.details || !this.header || !this.detailsBtn) return;
        this.details.classList.toggle("hidden");
        this.header.classList.toggle("hidden");
        this.detailsBtn.classList.toggle("active");
    }

    decrease() {
        if (this.count > 1) {
            this.count--;
            this.updateValue();
        }
    }

    increase() {
        this.count++;
        this.updateValue();
    }

    updateValue() {
        if (this.qtyValue) {
            this.qtyValue.textContent = this.count;
            this.updateSelection();
        }
    }

    getItemData() {
        const name = this.card.querySelector(".fitting-row__name")?.textContent.trim() || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
        const dyElement = this.card.querySelector(".fitting-details-header b");
        const dy = dyElement ? dyElement.textContent.trim() || "–ù–µ —É–∫–∞–∑–∞–Ω–æ" : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

        const priceText = this.priceElement?.textContent.trim() || "–ü–æ –∑–∞–ø—Ä–æ—Å—É";
        let price = priceText.includes("–ü–æ –∑–∞–ø—Ä–æ—Å—É") 
        ? "–ü–æ –∑–∞–ø—Ä–æ—Å—É" 
        : parseFloat(priceText.replace(/[^\d,.]/g, "").replace(",", "."));


        return {
            id: this.card.dataset.id || "unknown",
            name,
            dy,
            quantity: this.count,
            price
        };
    }

    updateSelection() {
        if (!this.checkbox) return;

        const id = this.card.dataset.id;
        if (this.checkbox.checked) {
            selectedItems.set(id, this.getItemData());
        } else {
            selectedItems.delete(id);
        }

        this.saveCheckboxState(id, this.checkbox.checked);
        return getJSON();
    }

        // üü¢ –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –≤ sessionStorage
    saveCheckboxState(id, checked) {
        let savedState = JSON.parse(sessionStorage.getItem("checkboxStates")) || {};
        savedState[id] = checked;
        sessionStorage.setItem("checkboxStates", JSON.stringify(savedState));
    }

    // üü¢ –ú–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    restoreCheckboxState() {
        let savedState = JSON.parse(sessionStorage.getItem("checkboxStates")) || {};
        if (savedState[this.card.dataset.id] !== undefined) {
            this.checkbox.checked = savedState[this.card.dataset.id];
        }
    }

}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
const selectedItems = new Map();

function getJSON() {
    const itemsArray = Array.from(selectedItems.values());
    const totalItems = itemsArray.length;
    const totalPrice = itemsArray.reduce((sum, item) => {
        return typeof item.price === "number" 
            ? sum + parseFloat(item.price) * item.quantity 
            : sum;
    }, 0);

    return {
        items: itemsArray,
        summary: {
            total_items: totalItems,
            total_price: totalPrice
        }
    };
}


class CartManager {
    constructor() {
        this.selectedItems = selectedItems; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π Map
        this.init();
    }

    init() {
        document.querySelectorAll(".row-result").forEach(row => {
            const id = row.dataset.id
            const name = row.querySelector(".fitting-row__name")?.textContent.trim() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            const priceText = row.querySelector(".fitting-row__price")?.textContent.trim() || "";
            const price = priceText.includes("–ü–æ –∑–∞–ø—Ä–æ—Å—É") ? "–ü–æ –∑–∞–ø—Ä–æ—Å—É" : parseFloat(priceText.replace(/\D/g, ""), 10) || 0;
            const qtyElement = row.querySelector(".qty-value");

            let quantity = parseInt(qtyElement?.textContent) || 1;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤–µ—à–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            row.querySelector(".plus")?.addEventListener("click", () => this.updateQuantity(id, qtyElement, 1));
            row.querySelector(".minus")?.addEventListener("click", () => this.updateQuantity(id, qtyElement, -1));           
            row.querySelector(".delete-btn")?.addEventListener("click", () => this.removeItem(row, id));
        });

        this.updateSummary();
    }

    

    updateQuantity(id, qtyElement, change) {
 
        console.log(selectedItems)
        if (this.selectedItems.has(id)) {
            let item = this.selectedItems.get(id);
            item.quantity = Math.max(1, (Number(item.quantity) || 1) + (Number(change) || 0));
    
            this.selectedItems.set(id, { ...item });
            qtyElement.textContent = item.quantity;
            this.updateSummary();
        } else {
            console.warn(`–≠–ª–µ–º–µ–Ω—Ç —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ selectedItems`);
        }
    }
    
    
    
    
    

    removeItem(row, id) {
        // –ü—Ä–∏–≤–æ–¥–∏–º id –∫ —Å—Ç—Ä–æ–∫–µ, —Ç–∞–∫ –∫–∞–∫ data-id –≤ HTML ‚Äî —Å—Ç—Ä–æ–∫–∞
        id = String(id);
    
        // –ù–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å –ø–æ data-id
        const checkbox = document.querySelector(`.fitting-row[data-id="${id}"] input[type='checkbox']`);
        if (checkbox) {
            checkbox.checked = false; // –°–Ω–∏–º–∞–µ–º —á–µ–∫–±–æ–∫—Å
        }
    
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        row.remove();
        this.selectedItems.delete(id);
        this.updateSummary();
    }
    
    

    updateSummary() {
        let uniqueItems = this.selectedItems.size;
        let totalQuantity = 0;
        let totalPrice = 0;
    
        if (uniqueItems === 0) {
            // –ï—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            document.getElementById("selected-count").textContent = "0";
            document.getElementById("total-price").textContent = "0";
            return;
        }
    
        this.selectedItems.forEach(item => {
            totalQuantity += item.quantity;
            if (typeof item.price === "number") {
                totalPrice += item.price * item.quantity;
            }
        });
    
        document.getElementById("selected-count").textContent = 
            `${uniqueItems}`;
    
        let totalPriceElement = document.getElementById("total-price");
        let totalPriceWrapper = totalPriceElement.parentElement; // <strong>
        
        if (totalPrice) {
            totalPriceElement.textContent = totalPrice.toLocaleString();
            totalPriceWrapper.innerHTML = `<span id="total-price">${totalPrice.toLocaleString()}</span> —Ä—É–±.`;
        } else {
            totalPriceWrapper.innerHTML = `<span id="total-price">–ü–æ –∑–∞–ø—Ä–æ—Å—É</span>`;
        }
            
    }
    
    
}

// Main
class Trigger {
    constructor(fetchService) {
        this.fetchService = fetchService;
        this.buttons = document.querySelectorAll(".filter-btn");
        this.selectedItemsButton = document.getElementById("showSelectedItems"); // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫—É
        this.init();
    }

    async handleButtonClick(button) {
        console.log("handleButtonClick triggered for:", button);
        const isActive = button.classList.contains("active");
        this.buttons.forEach(btn => {
            if (btn !== button) {
                btn.classList.remove("active");
            }
        });

        button.classList.add("active");
        const query = button.getAttribute("data-query");

        // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
        const jsonData = await this.fetchService.fetchData(query);
        const fitList = document.getElementById("fittingsList");
        fitList.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞

        jsonData.forEach(data => {
            const builder = new HTMLBuilder(data);
            const componentTree = builder.build();
            fitList.appendChild(componentTree.render());
        });
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        document.querySelectorAll(".fitting-row").forEach((card, index) => {
            card.dataset.id = query + '-' + (index + 1);
            new ProductLogic(card);
        });
    }

    async handleShowSelectedItems() {
        console.log("Show selected items button clicked");

        // –ü–æ–ª—É—á–∞–µ–º JSON (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö)
        const jsonData = getJSON();


        const builder = new HTMLBuilder({});
        const selectedItems = builder.buildSelectedItems(jsonData);
        const fitList = document.getElementById("fitResult");
        fitList.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        selectedItems.forEach(component => fitList.appendChild(component.render()));
        new CartManager();
        
    }

    async init() {
        this.buttons.forEach(button => {
            button.addEventListener("click", () => this.handleButtonClick(button));
        });

        window.addEventListener("load", () => {
            sessionStorage.removeItem("checkboxStates");
        });

        document.getElementById("showSelectedItems").addEventListener("click", function () {
            const fittingResult = document.querySelector(".fitting-result");
            const fittingTable = document.querySelector(".fitting-table");
        
            fittingResult.classList.toggle("hidden");
            fittingTable.classList.toggle("hidden");
        
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            this.textContent = fittingResult.classList.contains("hidden") 
                ? "–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã" 
                : "–°–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã";
        });
        

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "Show Result"
        if (this.selectedItemsButton) {
            this.selectedItemsButton.addEventListener("click", () => this.handleShowSelectedItems());
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        const activeButton = document.querySelector(".filter-btn.active");
        if (activeButton) {
            console.log("Active button found:", activeButton);
            await this.handleButtonClick(activeButton);
        } else {
            console.log("No active button found at init.");
        }
    }
}

class FormsValidation {
    selectors = {
      form: '[data-js-form]',
      fieldErrors: '[data-js-form-field-errors]',
      input: 'input'
    }

    errorMessages = {
      valueMissing: () => '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ',
      patternMismatch: ({ title }) => title || '–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É',
      tooShort: ({ minLength }) => `–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –º–∏–Ω–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî ${minLength}`,
      tooLong: ({ maxLength }) => `–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî ${maxLength}`,
      phoneMismatch: () => '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      emailMismatch: () => '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Email'
    }

    constructor() {
      this.bindEvents()
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∞–º–∏
    manageErrors(fieldControlElement, errorMessages) {
      const fieldErrorsElement = fieldControlElement.parentElement.querySelector(this.selectors.fieldErrors)

      fieldErrorsElement.innerHTML = errorMessages
        .map((message) => `<span class="field__error">${message}</span>`)
        .join('')
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è
    validateField(fieldControlElement) {
      const errors = fieldControlElement.validity
      const errorMessages = []

      Object.entries(this.errorMessages).forEach(([errorType, getErrorMessage]) => {
        if (errors[errorType]) {
          errorMessages.push(getErrorMessage(fieldControlElement))
        }
      })

      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (fieldControlElement.id === 'phone' && fieldControlElement.value) {
        const phonePattern = /^\+?\d{10,12}$/;
        if (!phonePattern.test(fieldControlElement.value)) {
          errorMessages.push(this.errorMessages.phoneMismatch())
        }
      }

      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è email
      if (fieldControlElement.id === 'email' && fieldControlElement.value) {
        const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.(?!co$|tv$)[a-zA-Z]{2,}$/;
        if (!emailPattern.test(fieldControlElement.value)) {
          errorMessages.push(this.errorMessages.emailMismatch())
        }
      }

      this.manageErrors(fieldControlElement, errorMessages)

      const isValid = errorMessages.length === 0
      fieldControlElement.ariaInvalid = !isValid

      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª–µ–π
      if (isValid) {
        fieldControlElement.style.borderColor = '#4CAF50'; // –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª–µ–π
        fieldControlElement.style.boxShadow = '0 0 5px rgba(76, 175, 80, 0.5)';
      } else {
        fieldControlElement.style.borderColor = 'rgba(231, 23, 0, 0.5)'; // –û—Ä–∞–Ω–∂–µ–≤–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª–µ–π
        fieldControlElement.style.boxShadow = '0 0 5px rgba(254, 28, 3, 0.5)';
      }

      return isValid
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è"
    onInput(event) {
      const { target } = event
      const isFormField = target.closest(this.selectors.form)

      if (isFormField) {
        // –ï—Å–ª–∏ –ø–æ–ª–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        this.validateField(target)
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã"
    onSubmit(event) {
        const isFormElement = event.target.matches(this.selectors.form);
        if (!isFormElement) return;
      
        const requiredControlElements = [...event.target.elements].filter(({ required }) => required);
        let isFormValid = true;
        let firstInvalidFieldControl = null;
      
        requiredControlElements.forEach((element) => {
          const isFieldValid = this.validateField(element);
      
          if (!isFieldValid) {
            isFormValid = false;
      
            if (!firstInvalidFieldControl) {
              firstInvalidFieldControl = element;
            }
          }
        });
      
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ Map
        const fieldErrorsElement = document.getElementById('selected-errors');
      
        if (selectedItems.size === 0) {
          isFormValid = false;
          if (fieldErrorsElement) {
            showToastError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.")
          }
        } else if (fieldErrorsElement) {
          fieldErrorsElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω
        }
      
        if (!isFormValid) {
          event.preventDefault();
          if (firstInvalidFieldControl) firstInvalidFieldControl.focus();
        }
      }
      

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞)
      document.addEventListener('input', (event) => {
        this.onInput(event)
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
      document.addEventListener('submit', (event) => this.onSubmit(event))
    }
}

function showToastError(message) {
    const toast = document.createElement("div");
    toast.classList.add("toast-error");

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É (SVG)
    toast.innerHTML = `
        <svg class="toast-icon" viewBox="0 0 24 24">
            <path fill="white" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z"/>
        </svg>
        <span>${message}</span>
    `;

    document.body.appendChild(toast);
    setTimeout(() => toast.classList.add("show"), 10);
    setTimeout(() => {
        toast.classList.remove("show");
        setTimeout(() => toast.remove(), 500);
    }, 3000);
}


  

  






// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
const fetchService = new FetchService("https://rvdexpert.ru/wp-json/custom/v1/brands/");
new Trigger(fetchService);
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
new FormsValidation()
